from time import time
import cupy as np  # numpy for CPU, and cupy for GPU
from tqdm import tqdm
from multiprocessing import Pool
from numba import jit

from constants import *
from reverse_fast import split

rev1 = np.array([107, 27, 24089, 90, 57, 87, 228, 196, 229, 96, 189, 145, 48, 224, 71, 0, 89, 0,
246, 43, 248, 192, 129, 11, 205, 222, 24, 247, 29012, 132, 130, 5, 0, 131, 241,  146, 49, 3, 113,
159, 8, 254, 233, 10, 119, 56453, 223, 177, 82, 252, 201, 39431, 141, 116, 100, 211, 111, 69, 198,
217, 149, 219, 0, 231, 162, 163, 38, 118, 0, 249, 239, 101, 19, 53582, 44, 34, 126, 68, 147, 184,
190, 93, 83, 40, 150, 15, 105, 53177, 194, 76, 0, 216, 60, 16, 124, 199, 253, 122, 23, 41, 92, 240,
46378, 215, 197, 81, 35, 0, 63, 156, 52, 245, 234, 32, 33, 256, 120, 0, 50, 128, 38678, 158, 175,
193, 9, 237, 227, 104, 0, 61, 166, 31, 143, 46, 66, 251, 186, 154, 73, 206, 72, 43914, 97, 17, 187,
117, 62, 57511, 4, 135, 77, 94, 181, 214, 235, 88, 188, 123, 0, 202, 70, 54, 62267, 173, 153, 51,
169, 151, 91, 134, 29, 102, 1, 98, 174, 0, 14, 0, 86, 6, 121, 220, 176, 209, 136, 243, 67, 218,
49676, 179, 230, 127, 39, 45, 58, 137, 160, 165, 16440, 250, 236, 28, 106, 0, 204, 171, 103, 47, 74,
2, 18, 21, 20, 0, 144, 53, 60784, 232, 64, 140, 115, 168, 212, 164, 85, 142, 207, 108, 0, 180, 79,
191, 36, 31781, 80, 203, 55, 109, 200, 170, 30, 110, 26, 183, 242, 213, 13, 65123, 139, 161, 0, 157,
226, 178, 75, 148], dtype=np.uint16)


@jit(forceobj=True)
def reverse2(d):
    d = d.T
    c = np.zeros_like(d)
    c[0] = d[0]^d[7]^d[10]^d[12]^d[13]^d[15]^d[18]^d[19]^d[21]^d[22]^d[25]^d[28]^d[29]^d[30]^d[31]
    c[1] = d[1]^d[4]^d[7]^d[10]^d[11]^d[12]^d[14]^d[15]^d[16]^d[18]^d[21]^d[23]^d[25]^d[26]^d[28]
    c[2] = d[2]^d[5]^d[8]^d[11]^d[13]^d[15]^d[16]^d[17]^d[19]^d[20]^d[22]^d[26]^d[27]^d[28]^d[29]
    c[3] = d[3]^d[6]^d[9]^d[12]^d[14]^d[17]^d[18]^d[20]^d[21]^d[23]^d[24]^d[27]^d[28]^d[29]^d[30]
    c[4] = d[3]^d[4]^d[8]^d[9]^d[11]^d[14]^d[17]^d[18]^d[22]^d[23]^d[24]^d[25]^d[26]^d[27]^d[29]
    c[5] = d[0]^d[3]^d[5]^d[8]^d[10]^d[11]^d[14]^d[15]^d[17]^d[19]^d[20]^d[22]^d[24]^d[29]^d[30]
    c[6] = d[1]^d[6]^d[9]^d[11]^d[12]^d[15]^d[16]^d[18]^d[20]^d[21]^d[23]^d[24]^d[25]^d[30]^d[31]
    c[7] = d[2]^d[7]^d[8]^d[10]^d[13]^d[16]^d[17]^d[19]^d[21]^d[22]^d[24]^d[25]^d[26]^d[28]^d[31]
    c[8] = d[2]^d[4]^d[5]^d[7]^d[8]^d[15]^d[17]^d[20]^d[21]^d[22]^d[23]^d[26]^d[27]^d[29]^d[30]
    c[9] = d[2]^d[3]^d[4]^d[6]^d[7]^d[9]^d[12]^d[15]^d[17]^d[18]^d[20]^d[24]^d[26]^d[29]^d[31]
    c[10] = d[0]^d[3]^d[5]^d[7]^d[10]^d[13]^d[18]^d[19]^d[20]^d[21]^d[24]^d[25]^d[27]^d[28]^d[30]
    c[11] = d[1]^d[4]^d[6]^d[11]^d[14]^d[16]^d[19]^d[20]^d[21]^d[22]^d[25]^d[26]^d[28]^d[29]^d[31]
    c[12] = d[0]^d[1]^d[3]^d[6]^d[11]^d[12]^d[16]^d[17]^d[18]^d[19]^d[21]^d[25]^d[26]^d[30]^d[31]
    c[13] = d[0]^d[2]^d[3]^d[6]^d[7]^d[8]^d[11]^d[13]^d[16]^d[21]^d[22]^d[25]^d[27]^d[28]^d[30]
    c[14] = d[1]^d[3]^d[4]^d[7]^d[9]^d[14]^d[16]^d[17]^d[22]^d[23]^d[24]^d[26]^d[28]^d[29]^d[31]
    c[15] = d[0]^d[2]^d[5]^d[10]^d[15]^d[16]^d[17]^d[18]^d[20]^d[23]^d[24]^d[25]^d[27]^d[29]^d[30]
    c[16] = d[2]^d[3]^d[5]^d[6]^d[9]^d[12]^d[13]^d[14]^d[15]^d[16]^d[23]^d[26]^d[28]^d[29]^d[31]
    c[17] = d[0]^d[2]^d[5]^d[7]^d[9]^d[10]^d[12]^d[17]^d[20]^d[23]^d[26]^d[27]^d[28]^d[30]^d[31]
    c[18] = d[0]^d[1]^d[3]^d[4]^d[6]^d[10]^d[11]^d[12]^d[13]^d[18]^d[21]^d[24]^d[27]^d[29]^d[31]
    c[19] = d[1]^d[2]^d[4]^d[5]^d[7]^d[8]^d[11]^d[12]^d[13]^d[14]^d[19]^d[22]^d[25]^d[28]^d[30]
    c[20] = d[1]^d[2]^d[6]^d[7]^d[8]^d[9]^d[10]^d[11]^d[13]^d[19]^d[20]^d[24]^d[25]^d[27]^d[30]
    c[21] = d[1]^d[3]^d[4]^d[6]^d[8]^d[13]^d[14]^d[16]^d[19]^d[21]^d[24]^d[26]^d[27]^d[30]^d[31]
    c[22] = d[0]^d[2]^d[4]^d[5]^d[7]^d[8]^d[9]^d[14]^d[15]^d[17]^d[22]^d[25]^d[27]^d[28]^d[31]
    c[23] = d[0]^d[1]^d[3]^d[5]^d[6]^d[8]^d[9]^d[10]^d[12]^d[15]^d[18]^d[23]^d[24]^d[26]^d[29]
    c[24] = d[1]^d[4]^d[5]^d[6]^d[7]^d[10]^d[11]^d[13]^d[14]^d[18]^d[20]^d[21]^d[23]^d[24]^d[31]
    c[25] = d[1]^d[2]^d[4]^d[8]^d[10]^d[13]^d[15]^d[18]^d[19]^d[20]^d[22]^d[23]^d[25]^d[28]^d[31]
    c[26] = d[2]^d[3]^d[4]^d[5]^d[8]^d[9]^d[11]^d[12]^d[14]^d[16]^d[19]^d[21]^d[23]^d[26]^d[29]
    c[27] = d[0]^d[3]^d[4]^d[5]^d[6]^d[9]^d[10]^d[12]^d[13]^d[15]^d[17]^d[20]^d[22]^d[27]^d[30]
    c[28] = d[0]^d[1]^d[2]^d[3]^d[5]^d[9]^d[10]^d[14]^d[15]^d[16]^d[17]^d[19]^d[22]^d[27]^d[28]
    c[29] = d[0]^d[5]^d[6]^d[9]^d[11]^d[12]^d[14]^d[16]^d[18]^d[19]^d[22]^d[23]^d[24]^d[27]^d[29]
    c[30] = d[0]^d[1]^d[6]^d[7]^d[8]^d[10]^d[12]^d[13]^d[15]^d[17]^d[19]^d[20]^d[23]^d[25]^d[30]
    c[31] = d[0]^d[1]^d[2]^d[4]^d[7]^d[8]^d[9]^d[11]^d[13]^d[14]^d[16]^d[18]^d[21]^d[26]^d[31]
    return c.T


def free():
    if np.__name__ == 'cupy':
        np._default_memory_pool.free_all_blocks()


@jit(forceobj=True)
def reverse1(d):
    d = rev1.take(d).astype(np.uint16)  # replace values in d by rev1[d]
    d = d[d.min(1) != 0, :] - 1  # remove all batch-items that contain a 0
    mask = d.max(1) > 0xFF
    easy = d[~mask]  # filter out trivial items that need no processing
    hard = d[mask]
    # del d  # this clears out a lot of memory!
    for i in range(32):
        free()
        mask = hard[:, i] > 0xFF
        ignore = hard[~mask]
        low = hard[mask]
        high = hard[mask]
        low[:, i] = low[:, i] & 0xFF
        high[:, i] = high[:, i] >> 8
        hard = np.vstack([ignore, low, high])
    return np.vstack([easy, hard]).astype(np.uint8)


def reverse(rev, prog=False):
    # rev =   # reverse_full_fast.BATCH_SIZE
    rev = np.array(rev, dtype=np.uint8)
    ran = range(ROUNDS)
    if prog:  ran = tqdm(ran, leave=False)
    for _ in ran:
        rev = reverse2(rev)
        rev = reverse1(rev)
        if prog:  ran.set_postfix_str(f"size {len(rev)}")
    return rev


if __name__ == '__main__':
    start = time()
    pool = Pool(BATCH_RUNS)
    gen = split.reverse3(TARGET)
    problems = [[next(gen) for _ in range(BATCH_SIZE)] for _ in range(BATCH_RUNS)]
    # pool.map(reverse, problems)
    for problem in problems:
        reverse(problem, True)
    print("Execution time = ", time() - start)
